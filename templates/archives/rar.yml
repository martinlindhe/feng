# STATUS: 70%

# - HI: archive_comment.rar, archive_comment_IDICTVXX.RAR decode COMM_HEAD chunk and extract comment data

# - HI: need samples with unsupported chunk types
# - MID: if MHD_PASSWORD is set, rest of file is scrambled, so stop decoding
# - LOW: calculate crc

references:
  - https://www.rarlab.com/technote.htm
  - https://codedread.github.io/bitjs/docs/unrar.html
  - https://www.sweetscape.com/010editor/repository/files/RAR.bt

kind: archive
name: RAR Archive
extensions: [.rar, .r00, .r01, .r02]
mime: application/vnd.rar
endian: little

magic:
  - offset: 0000
    match: c'Rar!' 1a

structs:
  chunk:
    u16 CRC: ??
    u8 Type:
      eq 72: MARKER # MARK_HEAD
      eq 73: ARCHIVE #MAIN_HEAD
      eq 74: FILE_OR_DIR  #FILE_HEAD
      eq 75: COMM_HEAD
      eq 76: AV_HEAD
      #eq 77: SUB_HEAD
      eq 78: PROTECT_HEAD
      #eq 79: SIGN_HEAD
      eq 7a: SUBBLOCK # NEWSUB_HEAD
      eq 7b: END #ENDARC_HEAD
      #default: invalid
    label: self.Type

    if either(self.Type, AV_HEAD, MARKER, PROTECT_HEAD, END):
      u16 CommonFlags:
        bit 4000: OLD_VERSION_IGNORE
        bit 8000: ADD_SIZE_PRESENT
      u16 HeaderSize: ??
      if self.CommonFlags & ADD_SIZE_PRESENT:
        u32 RawDataSize: ??

    if self.Type == ARCHIVE:
      u16 ArchiveFlags:
        bit 0001: ARCHIVE_VOLUME
        bit 0002: ARCHIVE_COMMENT_PRESENT
        bit 0004: ARCHIVE_LOCKED
        bit 0008: ARCHIVE_SOLID
        bit 0010: NEW_VOLUME_NAMING
        bit 0020: AV_PRESENT
        bit 0040: RECOVERY_PRESENT
        bit 0080: BLOCK_HEADERS_ENCRYPTED # means rest of header is unreadable
        bit 0100: IS_FIRST_VOLUME
        bit 4000: OLD_VERSION_IGNORE
        bit 8000: ADD_SIZE_PRESENT
      u16 HeaderSize: ??
      if self.ArchiveFlags & ADD_SIZE_PRESENT:
        u32 RawDataSize: ??
      u16 HighPosAv: ??
      u32 PosAv: ??

      #if self.archiveFlags & ARCHIVE_COMMENT_PRESENT:
      #  # XXX will need to know absolute offset now in order to calculate comment data size later
      #  chunk Comment: ??

    if self.Type == FILE_OR_DIR:
      u16 FileFlags:
        bit 0001: FROM_PREV_VOLUME # LHD_SPLIT_BEFORE
        bit 0002: TO_NEXT_VOLUME   # LHD_SPLIT_AFTER
        bit 0004: PASSWORD_ENCRYPTED
        bit 0008: FILE_COMMENT_PRESENT
        bit 0010: SOLID
        #bit 0100: DICTIONARY  # XXX 3 bits
        #bit 0200: LHD_UNICODE   # XXX indicates filename is in unicode
        #bit 0400: LHD_SALT
        #bit 0800: LHD_VERSION
        # byte 2:
        bit 0100: HIGH_SIZE
        bit 0200: HAS_UNICODE_FILENAME
        bit 0400: ENCRYPTION_SALT
        bit 0800: IS_OLD_FILE_VERSION
        bit 1000: EXTENDED_TIME_INFO  # LHD_EXTTIME
        bit 2000: reserved            # LHD_EXTFLAGS
        bit 4000: OLD_VERSION_IGNORE
        bit 8000: ADD_SIZE_PRESENT
      u16 HeaderSize: ??
      if self.FileFlags & ADD_SIZE_PRESENT:
        u32 RawDataSize: ??
      u32 Unpacked size: ??
      u8 Host OS:
        eq 00: MS-DOS
        eq 01: OS/2
        eq 02: Win32
        eq 03: Unix
        eq 04: MacOS
        eq 05: BeOS
      u32 CRC32: ??
      dostimedate Time: ??
      u8 Version to unpack: ??
      u8 Pack method:
        eq 30: Store
        eq 31: Fastest
        eq 32: Fast
        eq 33: Normal
        eq 34: Good
        eq 35: Best
      u16 NameSize: ??
      u32 UnixStyleAttrs: ?? # XXX enum, 010 has mapping
      ascii[self.NameSize] FileName: ??
      label: self.FileName
      u8[self.HeaderSize - (OFFSET - offset("self.CRC"))] Reserved: ??
      u8[self.RawDataSize] Data: ??   # XXX not always present...
    
    #if self.Type == COMM_HEAD:
    #  u16 UncompressedSize: ??
    #  u8 VersionToUnpack: ?? # XXX
    #  u8 CompressionMethod: ?? # XXX map
    #  u16 CommentCRC: ??
    #  u8[OFFSET - offset("x")] Comment data: ?? # XXX

    if self.Type == SUBBLOCK:
      u16 Main header flags:
        bit 4000: OLD_VERSION_IGNORE
        bit 8000: ADD_SIZE_PRESENT
      u16 HeaderSize: ??
      u32 DataSize: ??
      u8[15] Unknown: ??
      u8 SubTypeLen: ??
      u8[5] Unknown: ??
      ascii[self.SubTypeLen] SubType: ??

      u8[self.HeaderSize - (OFFSET - offset("self.CRC"))] Reserved: ??
      u8[self.DataSize] Data: ??

    if either(self.Type, ARCHIVE, AV_HEAD, PROTECT_HEAD): # XXX also FILE_OR_DIR ?. padding calc goes wrong
      u8[self.HeaderSize - (OFFSET - offset("self.CRC"))] Reserved (unmapped data?): ??

layout:
  - chunk []Chunk
