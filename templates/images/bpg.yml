# STATUS: 10%

# MAX: first we need to parse number type "ue(v)      unsigned integer 0-th order Exp-Golomb-coded (see HEVC specification)."
# MAX: format then requires bit sized fields   "u(1), u(7), u(n)"

references:
  - https://bellard.org/bpg/bpg_spec.txt
  - https://en.wikipedia.org/wiki/Better_Portable_Graphics

software:
  - https://www.xnview.com/en/xnview/

kind: image
name: Better Portable Graphics
mime: image/bpg
extensions: [.bpg]
endian: little # XXX

magic:
  - offset: 0000
    match: c'BPG' FB

structs:
  heic_file:
    # see heic_file() in docs
    ascii[4] Signature: c'BPG' FB
    u8 Flags:
      bit b0000_1111: BitDepthMinus8
      bit b0001_0000: Alpha1
      bit b1110_0000: PixelFormat
    u8 Flags2:
      bit b1000_0000: Animation
      bit b0100_0000: LimitedRange
      bit b0010_0000: Alpha2
      bit b0001_0000: ExtensionPresent
      bit b1110_0000: ColorSpace

    vu32 PictureWidth: ??
    vu32 PictureHeight: ??
    vu32 PictureDataLength: ??
    if self.Flags2 == ExtensionPresent:
      vu32 ExtensionDataLength: ??
      data: unseen
      u8[self.ExtensionDataLength] ExtensionData: ??      # XXX decode, see extension_data() in docs

  hevc_header:
    # see hevc_header_and_data() in docs
    if (HeicFile.Flags & Alpha1) != 0 || (HeicFile.Flags2 & Alpha2) != 0:
      vu32 HeaderLength: ??
      u32 log2_min_luma_coding_block_size_minus3: ?? # XXX variable-sized number            ue(v)     # ue(v)  type   unsigned integer 0-th order Exp-Golomb-coded (see HEVC specification).
      #log2_diff_max_min_luma_coding_block_size                    ue(v)
      #log2_min_transform_block_size_minus2                        ue(v)
      #log2_diff_max_min_transform_block_size                      ue(v)
      #max_transform_hierarchy_depth_intra                         ue(v)
      #sample_adaptive_offset_enabled_flag                         # u(1)       # XXX 1 bit
      #pcm_enabled_flag                                            # u(1)       # XXX 1 bit

layout:
  - heic_file HeicFile
  - hevc_header HevcHeader
