# STATUS: 40%

# - MAX: use custom structs COMPS, COMPSOS
# - HI: handle EXIF data
# - MID: allow pattern matching on ascii[4]


references:
  - https://en.wikipedia.org/wiki/JPEG
  - https://en.wikipedia.org/wiki/JPEG_File_Interchange_Format
  - https://www.sweetscape.com/010editor/repository/files/JPG.bt
  - https://github.com/HexFiend/HexFiend/blob/master/templates/Images/JPEG.tcl
  - https://github.com/martinlindhe/formats/blob/master/parse/image/img_jpeg.go

kind: image
extensions: [.jpg, .jpeg]
mime: image/jpeg
endian: big

magic:
  - offset: 0000
    match: ff d8

structs:
  header:
    u8[2] SOI marker: ff d8

  segment:
    u16 Signature:
      eq ffe0: M_APP0
      eq ffe1: M_APP1
      eq fffe: M_COMM
      eq ffdb: M_DQT
      eq ffc4: M_DHT
      eq ffda: M_SOS
      eq ffc0: M_SOF0
      eq ffc2: M_SOF2
      eq ffd9: M_EOI

    label: self.Signature

    u16 Length: ??  # length of segment excluding signature

    if self.Signature == M_APP0:
      u32 Identifier: # XXX TODO: allow pattern matching on ascii[4]
        eq c'JFIF': JFIF_APP0
        eq c'JFXX': JFXX_APP0
      u8 Reserved: "00"

      if not(self.Identifier, JFIF_APP0, JFXX_APP0):
        u8[self.Length] Unknown data: ?? # XXX verify this Length

      if self.Identifier == JFIF_APP0:
        u8 Major version: ??
        u8 Minor version: ??
        u8 Density units:
          eq 00: No units
          eq 01: Pixels per inch
          eq 02: Pixels per centimeter
        u16 Xdensity: ??
        u16 Ydensity: ??
        u8 Xthumbnail: ??
        u8 Ythumbnail: ??
        if self.Xthumbnail != 0 && self.Ythumbnail != 0:
          rgb8[Xthumbnail * Ythumbnail] Thumbnail data: ?? # XXX 8 bit per channel rgb: R, G, B bytes

      if self.Identifier == JFXX_APP0:
        u8 Thumbnail format:
          eq 10: JPEG format
          eq 11: 1bpp palettized format
          eq 13: 3bpp RGB format
        u8[10] Thumbnail data: ?? # XXX size depends on Thumbnail format, see tagApp0 in https://www.sweetscape.com/010editor/repository/files/JPG.bt

    if self.Signature == M_APP1:
      ascii[6] EXIF: c'Exif' 00 00  # XXX other values exist too, but "Exif" marks the start of the following bytes. NEED SAMPLE
      u16 Align:                    # XXX match on ascii[2]
        eq c'MM': BIG_ENDIAN
        eq c'II': LITTLE_ENDIAN
        default: invalid
      if self.Align == LITTLE_ENDIAN:
        endian: little
      #var: exifBaseOffset = offset("self.Align")     # XXX implement. need exact offset for later calculations

      u16 tagMark: ??
      u32 FirstIFDOffset: ??
      if self.FirstIFDOffset != 8:
        offset: self.offset + self.FirstIFDOffset
      ifd[] IFD: ??
      endian: big

    if self.Signature == M_COMM:
      ascii[self.Length - 2] Comment: ??

    if self.Signature == M_DQT:
      # XXX self.Length indicates if multiples of this follows: NEED SAMPLE
      u8 QuanFlag:
        bit b1111_0000: Pq
        bit b0000_1111: Tq
      if (self.QuanFlag & Pq) != 0:
        u16[64] qTable: ??
      else:
        u8[64] qTable: ??

    if self.Signature == M_DHT:
      u8 htInfo: ??
      u8[16] htLength: ??
      u8[self.Length - 2 - 1 - 16] HTV: ??

    if self.Signature == M_SOS:
      u8 nr_comp: ??
      u8[2 * self.nr_comp] COMPSOS data: ?? # XXX nr_comp number of COMPSOS structs. XXX make COMPSOS a types
      u8 Ss: ??
      u8 Se: ??
      u8 Flag:
        bit b1111_0000: Ah
        bit b0000_1111: Al

      # maps all bytes until M_EOI marker is seen into scanData
      until: u8 scanData ff d9

    if self.Signature == M_SOF0:
      u8 Precision: ??
      u16 Image height: ??
      u16 Image width: ??
      u8 nr_comp: ??
      u8[3 * self.nr_comp] COMPS data: ?? # XXX nr_comp number of COMPS structs. XXX make COMPS a types

    if self.Signature == M_SOF2:
      u8 Precision: ??
      u16 Image height: ??
      u16 Image width: ??
      u8 CompCount: ??
      u8[3 * self.CompCount] COMPS data: ?? # XXX nr_comp number of COMPS structs. XXX make COMPS a types

  ifd:
    u16 DirEntryCount: ??
    direntry[self.DirEntryCount] DirEntry: ??
    u32 nextIFDOffset: ?? # XXX
    if self.nextIFDOffset == 0:
      parse: stop
    offset: self.nextIFDOffset

  direntry:
    u16 ExifTagNumber:
      eq 010f: Make
      eq 0110: Model
      eq 0112: Orientation
      eq 011a: XResolution
      eq 011b: YResolution
      eq 0128: ResolutionUnit
      eq 0131: Software
      eq 0132: ModifyDate
      eq 0213: YCbCrPositioning
      eq 8298: Copyright
      eq 8769: ExifOffset
    label: self.ExifTagNumber
    u16 DataFormat:
      eq 0002: ascii
      eq 0003: u16
      eq 0004: u32
      eq 0005: ratio # XXX
    u32 ComponentSize: ??
    u32 DataOffset: ??
    #if self.DataFormat == ascii:
    #  offset: exifBaseOffset + self.DataOffset    # XXX base is the ALIGN byte offset in APP1
    #  ascii[self.ComponentSize] Text: ??
    #  offset: restore


  # XXX MAKE USE OF
  comps:
    u8 compId: ??
    u8 Flag:
      bit b1111_0000: Horizontal
      bit b0000_1111: Vertical
    u8 compNr: ??

  COMPSOS:
    u8 compId: ??
    u8 Flag:
      bit b1111_0000: DC
      bit b0000_1111: AC



layout:
  - header Header
  - segment[] Segment
