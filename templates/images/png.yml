# STATUS: 80%

# - MID: decode "vpAg" chunk (need docs)
# - MID: decode utf8 text in iTXt
# - LOW: calculate crc32

# TODO: the concatenation of the contents of all the IDAT chunks makes up a zlib datastream (if compression is on)

references:
  - https://en.wikipedia.org/wiki/Portable_Network_Graphics
  - http://www.libpng.org/pub/png/spec/1.2/PNG-Chunks.html
  - https://www.sweetscape.com/010editor/repository/files/PNG.bt
  - https://github.com/HexFiend/HexFiend/blob/master/templates/Images/PNG.tcl
  - https://raw.githubusercontent.com/synalysis/Grammars/master/png.grammar

kind: image
#extensions: [.png]
mime: image/png
endian: big

magic:
  - offset: 0000
    match: 89 c'PNG' 0d 0a 1a 0a

structs:
  header:
    u8[8] Signature: 89 c'PNG' 0d 0a 1a 0a

  ihdr:
    u32 Length: ??
    ascii[4] Type: c'IHDR'
    u32 Width: ??
    u32 Height: ??
    u8 Bit depth:
      eq 01: 1 bpp
      eq 02: 2 bpp
      eq 04: 4 bpp
      eq 08: 8 bpp
      eq 10: 16 bpp
    u8 ColorType:
      eq 00: COLOR_GRAYSCALE
      eq 02: COLOR_RGB
      eq 03: COLOR_PALETTE
      eq 04: COLOR_GRAY_ALPHA
      eq 06: COLOR_RGBA
    u8 Compression method:
      eq 00: deflate
    u8 Filter method:
      eq 00: none+sub+up+average+paeth
    u8 Interlace method:
      eq 00: no interlace
      eq 01: Adam7 interlace
    u32 Checksum: ??                        # XXX crc32 type

  chunk:
    u32 Length: ??                          # length of chunk data (excluding Length and Type fields)
    u32 Type:
      eq c'IDAT': IDAT
      eq c'PLTE': PLTE
      eq c'IEND': IEND
      eq c'sBIT': sBIT
      eq c'sRGB': sRGB
      eq c'pHYs': pHYs
      eq c'tEXt': tEXt
      eq c'zTXt': zTXt
      eq c'iTXt': iTXt
      eq c'iCCP': iCCP
      eq c'tIME': tIME
      eq c'bKGD': bKGD
      eq c'cHRM': cHRM
      eq c'gAMA': gAMA
      eq c'iDOT': iDOT                # non-registered chunk used by Apple

    label: self.Type

    if self.Type == IDAT:
      compressed:zlib[self.Length] Image data: ??

    if self.Type == PLTE:
      rgb8[self.Length / 3] Palette: ??

    if self.Type == sBIT:
      if IHDR.ColorType == COLOR_GRAYSCALE:
        u8 Significant bits grayscale: ??
      if either(IHDR.ColorType, COLOR_RGB, COLOR_PALETTE):
        u8 Significant bits red: ??
        u8 Significant bits green: ??
        u8 Significant bits blue: ??
      if IHDR.ColorType == COLOR_GRAY_ALPHA:
        u8 Significant bits grayscale: ??
        u8 Significant bits alpha: ??
      if IHDR.ColorType == COLOR_RGBA:
        u8 Significant bits red: ??
        u8 Significant bits green: ??
        u8 Significant bits blue: ??
        u8 Significant bits alpha: ??

    if self.Type == sRGB:
      u8 Rendering intent:
        eq 00: Perceptual
        eq 01: Relative colorimetric
        eq 02: Saturation
        eq 03: Absolute colorimetric

    if self.Type == pHYs:
      u32 Pixels per unit, X axis: ??
      u32 Pixels per unit, Y axis: ??
      u8 Unit specifier:
        eq 00: Unknown
        eq 01: Meter

    if self.Type == tEXt:
      asciiz Keyword: ??
      ascii[self.Length - len("self.Keyword")] Text: ??

    if self.Type == zTXt:
      asciiz Keyword: ??
      u8 Compression method:
        eq 00: Deflate
        default: invalid
      compressed:deflate[self.Length - (OFFSET - offset("self.Keyword"))] Compressed text: ??

    if self.Type == iTXt:
      asciiz Keyword: ??
      u8 Compression flag:
        eq 00: Uncompressed
        eq 01: Compressed
      u8 Compression method:
        eq 00: Deflate
        default: invalid
      asciiz Language tag: ??
      asciiz Translated keyword: ??
      ascii[self.Length - OFFSET - offset("self.Keyword"))] Text: ?? # XXX is UTF-8 encoded, not ascii !!!

    if self.Type == iCCP:
      asciiz ProfileName: ??
      u8 Compression method:
        eq 00: Deflate
        default: invalid
      compressed:deflate[self.Length - (OFFSET - offset("self.ProfileName"))] Compressed profile: ??

    if self.Type == tIME:
      # time in UTC
      u16 Year: ??
      u8 Month: ??
      u8 Day: ??
      u8 Hour: ??
      u8 Minute: ??
      u8 Second: ??

    if self.Type == bKGD:
      if IHDR.ColorType == COLOR_PALETTE:
        u8 Palette index: ??

      if either(IHDR.ColorType, COLOR_GRAYSCALE, COLOR_GRAY_ALPHA):
        u16 Gray: ??

      if either(IHDR.ColorType, COLOR_RGB, COLOR_RGBA):
        u16 Red: ??
        u16 Green: ??
        u16 Blue: ??

    if self.Type == cHRM:
      u32 White Point x: ??
      u32 White Point y: ??
      u32 Red x: ??
      u32 Red y: ??
      u32 Green x: ??
      u32 Green y: ??
      u32 Blue x: ??
      u32 Blue y: ??

    if self.Type == gAMA:
      u32 Gamma: ??

    if self.Type == iDOT:
      # NOTE: based on guesses from https://www.hackerfactor.com/blog/index.php?/archives/895-Connecting-the-iDOTs.html
      u32 Height divisor: ??
      u32 Unknown1: ??                      # always 0 ?
      u32 Divided height: ??
      u32 Unknown2: ??                      # always 0x40 ?
      u32 First half height: ??
      u32 Second half height: ??
      u32 IDAT restart offset: ??

    # UNKNOWN CHUNK TYPE
    if not(self.Type, IDAT, PLTE, sBIT, sRGB, pHYs, tEXt, zTXt, iTXt, iCCP, tIME, bKGD, cHRM, gAMA, iDOT):
      raw:u8[self.Length] Chunk data: ??

    #crc32[Type_IHDR.offset:self.offset] Checksum: ??   # XXX crc32 in big-endian of chunk minus Length and CRC field
    u32 Checksum: ??                        # XXX crc32 type

layout:
  - header Header
  - ihdr IHDR                               # a valid PNG must start with an IHDR chunk
  - chunk[] Chunk                           # multiple chunks until end of file
