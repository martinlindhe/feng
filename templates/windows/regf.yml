# STATUS: 10%

# HI: rewrite for slice parsing! (need custom types)

# TODO: need to get absolute value of hive_bin_header.Cell size. we must evaluate all expressions and add an abs() function
# - LOW: calculate checksums

references:
  - https://github.com/libyal/libregf/blob/main/documentation/Windows%20NT%20Registry%20File%20(REGF)%20format.asciidoc
  - https://github.com/msuhanov/regf/blob/master/Windows%20registry%20file%20format%20specification.md
  - https://www.sweetscape.com/010editor/repository/files/RegistryHive.bt

kind: system
name: Windows NT Registry File
extensions: [.dat] # has no standard extension
endian: little

magic:
  - offset: 0000
    match: c'regf'

types:
  # XXX impl!!!
  version:
    u32 Major: ??
    u32 Minor: ??

structs:
  base_block:
    ascii[4] Signature: c'regf'
    u32 Primary seq number: ??
    u32 Secondary seq number: ??
    filetime Timestamp: ??
    # version Version: ??   # XXX impl
    u32 Major version: ??
    u32 Minor version: ??
    u32 File type:
      eq 0000_0000: Primary file
    u32 File format:
      eq 0000_0001: Direct memory load
    u32 Root cell offset: ??
    u32 Hive bins data size: ??
    u32 Clustering factor: ??
    utf16[32] File name: ??
    u8[396] Reserved: ??
    u32 Checksum: ??          # xor-32 of the previous 508 bytes
    u8[3576] Reserved: ??
    u32 Boot type: ??
    u32 Boot recover: ??
  
  hive_bin:
    ascii[4] Signature: c'hbin'
    u32 Offset: ??   # XXX relative offset to after header. XXX make use of
    u32 Size: ??
    u8[8] Reserved: ??
    filetime Timestamp: ??
    u32 Spare: ??

  cell:
    i32 CellSize: ??   # XXX:  the size is positive if a cell is unallocated or negative if a cell is allocated (use abs() calculations)
    u16 CellSignature:
      eq 0000: SIG_END    # XXX uncofirmed. seem to be last entry in feng-samples/windows/regf/regf_001_settings.dat
      eq c'kn': SIG_NK    # Key Node
      eq c'ks': SIG_SK    # Key Security
      eq c'kv': SIG_VK    # Key Value
      eq c'fl': SIG_LF    # Fast Leaf
#      default: invalid # XXX

    label: self.CellSignature

    # KEY NODE
    if self.CellSignature == SIG_NK:
      u16 Flags:
        bit 00_01: KEY_VOLATILE
        bit 00_02: KEY_HIVE_EXIT
        bit 00_04: KEY_HIVE_ENTRY
        bit 00_08: KEY_NO_DELETE
        bit 00_10: KEY_SYM_LINK
        bit 00_20: KEY_COMP_NAME
        bit 00_40: KEY_PREDEF_HANDLE
        bit 00_80: VirtualSource
        bit 01_00: VirtualTarget
        bit 02_00: VirtualStore

      filetime Timestamp: ??
      u32 Access bits:
        bit 0000_0001: was accessed before registry was initialized
        bit 0000_0002: was accessed after registry was initialized

      u32 Parent cell offset: ??
      i32 Number of subkeys: ??
      i32 Number of volatile subkeys: ??
      i32 Subkeys list offset: ??
      i32 Volatile subkeys list offset: ??
      i32 Number of key values: ??
      i32 Key values list offset: ??
      i32 Key security offset: ??
      i32 Class name offset: ??
      i32 Largest subkey name length: ??
      i32 Largest subkey class name length: ??
      i32 Largest value name length: ??
      i32 Largest value data size: ??
      i32 WorkVar: ??
      u16 KeyLength: ??
      u16 Class name length: ??
      ascii[self.KeyLength] Key: ??
      u8[abs(self.CellSize) - 0x50 - self.KeyLength] Padding: ??

    if self.CellSignature == SIG_SK:
      u16 Reserved: ??
      i32 Flink: ??
      i32 Blink: ??
      i32 Reference count: ??
      i32 DescriptorLength: ??
      u8[self.DescriptorLength] Descriptor: ??      # XXX decode DESCRIPTOR ... see https://www.sweetscape.com/010editor/repository/files/RegistryHive.bt
      u8[abs(self.CellSize) - 0x18 - self.DescriptorLength] Padding: ??

    if self.CellSignature == SIG_VK:
      u16 NameLength: ??
      i32 DataLength: ??
      i32 DataOffset: ??
      i32 Type: ??
      u16 Flags: ??
      u16 Spare: ??
      u8[abs(self.CellSize) - 0x18 - self.NameLength] Padding: ??

    if self.CellSignature == SIG_LF:
      i16 NumberOfOffsets: ??
      u8[8 * self.NumberOfOffsets] Offset: ?? # XXX decode to custom struct: "int offset, char[4] HASH" (8 bytes per entry)
      u8[abs(self.CellSize) - 8 - (8 * self.NumberOfOffsets)] Padding: ??

    if self.CellSignature == SIG_END:
      # XXX uncofirmed. seem to be last entry in feng-samples/windows/regf/regf_001_settings.dat
      u8[self.CellSize - 6] Padding: ??

layout:
  - base_block FILE HEADER
  - hive_bin HBINRECORD
  - cell[] Cell
