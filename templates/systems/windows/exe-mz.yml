# STATUS: 10%
#
# TODO: support W3 (a collection of LE files, only used in WIN386.EXE)
# TODO: support W4 (a compressed collection of LE files, only used in VMM32.VXD)

references:
  # general EXE format
  - https://wiki.osdev.org/MZ
  - https://moddingwiki.shikadi.net/wiki/EXE_Format
  - https://www.sweetscape.com/010editor/repository/files/EXE.bt

  # MZ-LE format: Linear Executable (Win VxD:s, and OS/2)
  - http://fileformats.archiveteam.org/wiki/Linear_Executable
  - http://wiki.osdev.org/LE

  # MZ-NE format: 16-bit New Executable (Win16, OS/2)
  - https://wiki.osdev.org/NE
  - http://www.program-transformation.org/Transform/NeFormat

  # MZ-LX format: Linear eXecutable (OS/2)
  - http://www.virtualbox.org/svn/kstuff-mirror/trunk/include/k/kLdrFmts/lx.h

  # MZ-PE format: Portable Executable COFF (Win32, Win64)
  - http://wiki.osdev.org/PE
  - https://en.wikibooks.org/wiki/X86_Disassembly/Windows_Executable_Files
  - https://www.microsoft.com/whdc/system/platform/firmware/PECOFF.mspx
  - https://raw.githubusercontent.com/synalysis/Grammars/master/pe.grammar

  # general unpacker
  - https://github.com/virginwidow/mz-explode

kind: executable
name: MS-DOS / OS-2 / Windows executable
mime: application/x-dosexec
extensions: [.exe, .dll]
endian: little

magic:
  - offset: 0000
    match: c'MZ'

structs:
  dos_header:
    ascii[2] Signature: c'MZ'
    u16 UsedBytesInTheLastPage: ??
    u16 FileSizeInPages: ??
    u16 RelocationItemCount: ??
    u16 HeaderSizeInParagraphs: ??
    u16 MinimumExtraParagraphs: ??
    u16 MaximumExtraParagraphs: ??
    u16 InitialRelativeSS: ??       # XXX DOS 16 bit offset:segment pair datatype
    u16 InitialSP: ??
    u16 Checksum: ??
    u16 IP: ??                      # XXX DOS 16 bit offset:segment pair datatype
    u16 CS: ??
    u16 RelocationTableOffset: ??
    u16 OverlayNumber: ??

  relocation_table:
    u16 Offset: ??
    u16 Paragraph: ??

  exepack_header:
    # Microsoft EXEPACK check
    # https://moddingwiki.shikadi.net/wiki/Microsoft_EXEPACK

    if peek_i16(((Header.HeaderSizeInParagraphs + Header.CS) * 16) + Header.IP - 2) == 0x4252:
      # XXX TODO expose string variables in script engine and compare with "RB"
      offset: ((Header.HeaderSizeInParagraphs + Header.CS) * 16) + Header.IP - 18
      u16 Real IP: ??
      u16 Real CS: ??
      u16 Mem start: ??
      u16 Exepack size: ??
      u16 Real SP: ??
      u16 Real SS: ??
      u16 Dest len: ??
      u16 Skip len: ??
      ascii[2] ExepackMagic: ??
      u8[268] Unpacker code: ?? # XXX unsure of size
      offset: restore

  pklite_header:
    # https://moddingwiki.shikadi.net/wiki/PKLite
    if peek_i32("001e") == 0x494c4b50: # c'PKLI'
      offset: "0x001c"
      u8 Minor version: ??
      u8 Flags:
        bit b0000_1111: Major version
        bit b0001_0000: Extra compression
        bit b0010_0000: Multi-segment file
        bit b1100_0000: Unknown
      ascii[52] Identifier: ??

  tlink_header:
    # Borland TLINK
    if (peek_i32("001c") & 0x00FF00FF) == 0x00FB0001:
      offset: "0x001c"
      u8[3] Identifier: ??
      u8 Version: ??
      ascii[2] Identifier2: c'jr'

  lzexe_header:
    # TODO: some users change the ID bytes at 0x001c, we can instead detect on decompression block. NEED SUCH SAMPLE
    if peek_i16("001c") == 0x5A4C:
      offset: "0x001c"
      ascii[2] Identifier: c'LZ'
      ascii[2] Version:
        # FIXME: cannot match on ascii[2]
        eq c'90': "0.9"
        eq c'91': "0.91"
      u32 Real CS:IP: ?? # XXX DOS 16 bit offset:segment pair datatype
      u32 Real SS:SP: ??
      u16 Compressed load module size: ??
      u16 Increase load module size: ??
      u16 Uncompressed size: ??
      u16 Checksum: ??

      offset: ((Header.HeaderSizeInParagraphs + Header.CS) * 16) + Header.IP
      u8[232] Lzexe uncompressor program: ??

  new_header:
    if Header.RelocationTableOffset == 0x40:
      # new-(NE,LE,LX,W3,PE etc.) executable
      u16[4] Reserved: ??
      u16 OEM id: ??
      u16 OEM info: ??
      u16[10] Reserved2: ??
      u32 NewHeaderOffset: ??

      offset: ((Header.HeaderSizeInParagraphs + Header.CS) * 16) + Header.IP
      u8[self.NewHeaderOffset - ((Header.HeaderSizeInParagraphs + Header.CS) * 16) + Header.IP] DOS stub program: ??

      offset: self.NewHeaderOffset
      u16 NewHeaderID: ?? # XXX ascii "NE", "LE" etc.

  le_header:
    # Win, OS/2 (mixed 16/32-bit)
    if Header.RelocationTableOffset == 0x40 && NewHeader.NewHeaderID == 0x454C: # "LE"
      u8 Byte order: ?? # XXX
      u8 Word order: ?? # XXX
      u32 Executable format level: ??
      u16 CPU type:
        eq 0001: Intel 80286+
        eq 0002: Intel 80386+
        eq 0003: Intel 80486+
        eq 0004: Intel 80586+
        eq 0020: Intel i860 (N10) or compatible
        eq 0021: Intel "N11" or compatible
        eq 0040: MIPS Mark I (R2000, R3000) or compatible
        eq 0041: MIPS Mark II (R6000) or compatible
        eq 0042: MIPS Mark III (R4000) or compatible
      u16 Target OS:
        eq 0001: OS/2
        eq 0002: Windows
        eq 0003: DOS 4.x
        eq 0004: Windows 386
      u32 Module version: ??
      u32 Module type flags: ??
      u32 Memory page count: ??
      u32 Initial CS: ??
      u32 Initial EIP: ??
      u32 Initial SS: ??
      u32 Initial ESP: ??
      u32 Memory page size: ??
      u32 Bytes on last page: ??
      u32 Fix-up section size: ??
      u32 Fix-up section checksum: ??
      u32 Loader section size: ??
      u32 Loader section checksum: ??
      u32 Object table offset: ?? # XXX decode
      u32 Object table count: ??
      u32 Object page map offset: ??
      u32 Object iterate data map offset: ??
      u32 Resource table offset: ??
      u32 Resource table entries: ??
      u32 ResidentNamesTableOffset: ??
      u32 Entry table offset: ??
      u32 Module directives table offset: ??
      u32 Module directives entires: ??
      u32 Fix-up page table offset: ??
      u32 Fix-up record table offset: ??
      u32 ImportedModulesNameTableOffset: ??
      u32 ImportedModulesCount: ??
      u32 ImportedProcedureNameTableOffset: ??
      u32 Per-page checksum table offset: ??
      u32 Data pages offset: ??
      u32 Preload page count: ??
      u32 NonResidentNamesTableOffset: ??
      u32 NonResidentNamesTableLength: ??
      u32 NonResidentNamesTableChecksum: ??
      u32 Automatic data object: ??
      u32 Debug information offset: ??
      u32 Debug information length: ??
      u32 Preload instance pages number: ??
      u32 Demand instance pages number: ??
      u32 Extra heap allocation: ??
      u32 Unknown: ??

  lx_header:
    if Header.RelocationTableOffset == 0x40 && NewHeader.NewHeaderID == 0x584C: # "LX"
      u8 Border: ??
      u8 Worder: ??
      u32 Level: ??
      u16 Target CPU: ??
      u16 Target OS:
        eq 0001: OS/2
      u32 Version: ?? # XXX parse.MajorMinor32le
      u32 Mflags: ?? # XXX
      u32 MPages: ??
      u32 Start obj: ??
      u32 EIP: ??
      u32 Stack obj: ??
      u32 ESP: ??
      u32 Page size: ??
      u32 Page shift: ??
      u32 Fixup size: ??
      u32 Fixup sum: ??
      u32 LDR size: ??
      u32 LDR sum: ??
      u32 Obj tab: ??
      u32 Obj cnt: ??
      u32 Obj map: ??
      u32 Iter map: ??
      u32 Rsrc tab: ??
      u32 Rsrc cnt: ??
      u32 Res tab: ??
      u32 Ent tab: ??
      u32 Dir tab: ??
      u32 Dir cnt: ??
      u32 Fpage tab: ??
      u32 Frec tab: ??
      u32 Imp mod: ??
      u32 Imp mod cnt: ??
      u32 Imp proc: ??
      u32 Page sum: ??
      u32 Data page: ??
      u32 Preload: ??
      u32 Nres tab: ??
      u32 Cbnres tab: ??
      u32 Nres sum: ??
      u32 Autodata: ??
      u32 Debug info: ??
      u32 Debug len: ??
      u32 Inst preload: ??
      u32 Inst demand: ??
      u32 Heap size: ??
      u32 Stack size: ??
      u8[20] Reserved: ??

  ne_header:
    # Win16, OS/2
    if Header.RelocationTableOffset == 0x40 && NewHeader.NewHeaderID == 0x454E: # "NE"
      u16 LinkerVersion: ?? # XXX major+minor version data type
      u16 EntryTableOffset: ??
      u16 EntryTableLength: ??
      u32 File Load CRC: ??
      u8 Program flags:
        bit b0000_0011: Dgroup type # XXX 0=none, 1=single shared, 2=multiple, 3=null
        bit b0000_0100: Global initialization
        bit b0000_1000: Protected mode only
        bit b0001_0000: 8086 instructions
        bit b0010_0000: 80286 instructions
        bit b0100_0000: 80386 instructions
        bit b1000_0000: 80x87 instructions
      u8 App flags:
        bit b0000_0111: App type # XXX 1=unaware of win api, 2=compatible with win api, 3=uses win api
        bit b0000_1000: OS/2 family app
        bit b0001_0000: Reserved
        bit b0010_0000: Errors in image
        bit b0100_0000: Non-conforming program
        bit b1000_0000: DLL or driver

      u16 Auto data segment index: ??
      u16 Initial local heap size: ??
      u16 Initial stack size: ??
      u32 Entry point CS:IP: ?? # XXX type CS:IP
      u32 Stack pointer SS:SP: ?? # XXX type
      u16 SegmentTableCount: ??
      u16 ModuleReferenceCount: ??
      u16 Nonresident names table size: ??
      u16 SegmentTableOffset: ??
      u16 ResourceTableOffset: ??
      u16 ResidentNamesTableOffset: ??
      u16 ModuleReferenceTableOffset: ??
      u16 ImportedNamesTableOffset: ??
      u32 NonResidentNamesTableOffset: ??
      u16 Movable entry points in entry table: ??
      u16 File alignment size shift: ?? # 0 is equivalent to 9 (default 512-byte pages)
      u16 ResourceTableCount: ??      # value is ignored
      u8 Target OS:
        eq 01: OS/2
        eq 02: Windows
        eq 03: DOS 4.x
        eq 04: Windows 386
        eq 05: Borland Operating System Services (BOSS)
      u8 Extra flags:
        bit b0000_0001: Long filename support
        bit b0000_0010: Win2 protected mode
        bit b0000_0100: Win2 proportional fonts
        bit b0000_1000: Fastload area
        bit b1111_0000: Reserved
      u16 FastloadAreaOffset: ??  # only used by Windows
      u16 FastloadAreaSize: ??  # only used by Windows
      u16 Reserved: ??
      u16 Expected windows version: ?? # XXX Type: parse.MinorMajor16le}, only used by Windows

  ne_module_reference:
    u16 Module reference: ??

  ne_entry_table:
    # The entry-table data is organized by bundle, each of which begins with
    # a 2-byte header. The first byte of the header specifies the number of
    # entries in the bundle (a value of 00h designates the end of the table).
    # The second byte specifies whether the corresponding segment is movable
    # or fixed. If the value in this byte is 0FFh, the segment is movable.
    # If the value in this byte is 0FEh, the entry does not refer to a segment
    # but refers, instead, to a constant defined within the module. If the
    # value in this byte is neither 0FFh nor 0FEh, it is a segment index.
    u8 items: ??
    #if self.items == 0:
    #  break XXX
    u8 segNumber: ??
    # XXX TODO need struct-level ability to evaluate more custom structs to continue with this parsing

  ne_segment_table:
    u16 Offset: ??
    u16 Length: ??
    u16 Flags:
      bit b0000_0000_0000_0001: Type 0=code, 1=data
      bit b0000_0000_0000_0010: Allocated
      bit b0000_0000_0000_0100: Loaded
      bit b0000_0000_0000_1000: Iterated
      bit b0000_0000_0001_0000: 1=moveable, 0=fixed
      bit b0000_0000_0010_0000: Shareable
      bit b0000_0000_0100_0000: 1=preload, 0=loadoncall
      bit b0000_0000_1000_0000: Execute only/read only
      bit b0000_0001_0000_0000: Reloc data
      bit b0000_1110_0000_0000: Reserved
      bit b0001_0000_0000_0000: Discardable
      bit b1110_0000_0010_0000: Reserved
    u16 Min alloc size: ??

  ne_imported_names_table:
    u8 Reserved: ??

    # XXX THIS REPEATS UNTIL Length == 0 || peek(offset+1) == 0xFF
    u8 Length: ??
    ascii[self.Length] Data: ??

  ne_resident_names_table:
    u8 Length: ??
    # XXX if Length == 0 then no more entries. this should be a slice that stops parse if Length == 0
    ascii[self.Length] Data: ??
    u16 Ord: ??

  ne_nonresident_names_table:
    u8 Length: ??
    # XXX if Length == 0 then no more entries. this should be a slice that stops parse if Length == 0
    ascii[self.Length] Data: ??
    u16 Ord: ??

  ne_resource_table:
    #u16 Shift: ??

    # TTYPEINFO
    u16 Type: ?? # XXX map
    u16 Count: ??
    u16 Reserved: ??

    u8[self.Count * 12] TNAMEINFO Data: ?? # XXX parse into custom struct

  ne_fastload_area:
    u8[NEHeader.FastloadAreaSize] Fastload data: ??

  pe_header:
    # Win32, Win64
    if Header.RelocationTableOffset == 0x40 && NewHeader.NewHeaderID == 0x4550: # "PE"
      ascii[2] Identifier: ??
      u16 Machine:
        eq 014c: Intel 386
        eq 0162: MIPS R3000
        eq 0168: MIPS R10000
        eq 0169: MIPS little endian WCI v2
        eq 0183: Old Alpha AXP
        eq 0184: Alpha AXP
        eq 01a2: Hitachi SH3
        eq 01a3: Hitachi SH3 DSP
        eq 01a6: Hitachi SH4
        eq 01a8: Hitachi SH5
        eq 01c0: ARM little endian
        eq 01c2: ARM Thumb
        eq 01d3: Matsushita AM33
        eq 01f0: PowerPC little endian
        eq 01f1: PowerPC with floating point support
        eq 0200: Intel IA64
        eq 0266: MIPS16
        eq 0268: Motorola 68000 series
        eq 0284: Alpha AXP 64-bit
        eq 0366: MIPS with FPU
        eq 0466: MIPS16 with FPU
        eq 0ebc: EFI Byte Code
        eq 8664: AMD64
        eq 9041: Mitsubishi M32R little endian
        eq c0ee: Clr pure MSIL
      u16 Sections: ??
      time_t_32 Timestamp: ??
      u32 SymbolTableOffset: ??
      u32 SymbolTableCount: ??
      u16 OptionalHeaderSize: ??
      u16 Characteristics:
        bit b00000000_00000001: relocs stripped
        bit b00000000_00000010: executable
        bit b00000000_00000100: line nums stripped
        bit b00000000_00001000: local syms stripped
        bit b00000000_00010000: aggressive ws trim
        bit b00000000_00100000: large address aware
        bit b00000000_11000000: reserved
        bit b00000001_00000000: 32bit
        bit b00000010_00000000: debug stripped
        bit b00000100_00000000: removable run from swap
        bit b00001000_00000000: net run from swap
        bit b00010000_00000000: file system
        bit b00100000_00000000: dll
        bit b01000000_00000000: uniprocessor
        bit b10000000_00000000: reserved

  pe_optional_header:
    if Header.RelocationTableOffset == 0x40 && NewHeader.NewHeaderID == 0x4550 && PEHeader.OptionalHeaderSize != 0:
      u16 Type: # XXX map
        eq 0107: ROM
        eq 010b: PE32
        eq 020b: PE32+ (64-bit)
      u16 Linker version: ?? # XXX  parse.MajorMinor16le
      u32 CodeSize: ??
      u32 Size of initialized data: ??
      u32 Size of uninitialized data: ??
      u32 Address of entry point: ??
      u32 Base of code: ??
      u32 Base of data: ??
      u32 Image base: ??
      u32 Section alignment: ??
      u32 File alignment: ??
      u32 OS version: ??
      u32 Image version: ??
      u32 Subsystem version: ??
      u32 Win32 version: ??
      u32 Size of image: ??
      u32 Size of headers: ??
      u32 Checksum: ??
      u16 Subsystem:
        eq 0001: Native
        eq 0002: Windows GUI
        eq 0003: Windows console
        eq 0005: OS/2 console
        eq 0007: POSIX
        eq 0008: Native Windows
        eq 0009: Windows CE
        eq 000a: EFI application
        eq 000b: EFI boot service device
        eq 000c: EFI runtime driver
        eq 000d: EFI rom
        eq 000e: XBox
        eq 0010: Boot application
      u16 DLL characteristics: ?? # XXX flag?
      u32 Size of stack reserve: ??
      u32 Size of stack commit: ??
      u32 Size of heap reserve: ??
      u32 Size of heap commit: ??
      u32 Loader flags: ?? # XXX flag
      u32 RVAEntryCount: ??

  pe_rva_entry:
    if Header.RelocationTableOffset == 0x40 && NewHeader.NewHeaderID == 0x4550 && PEHeader.OptionalHeaderSize != 0:
      u32 VirtualAddress: ??
      u32 Size: ??
      if self.index == 0:
        label: '"Export"'
      if self.index == 1:
        label: '"Import"'
      if self.index == 2:
        label: '"Resource"'
      if self.index == 3:
        label: '"Exception"'
      if self.index == 4:
        label: '"Security"'
      if self.index == 5:
        label: '"BaseRelocationTable"'
      if self.index == 6:
        label: '"DebugDirectory"'
      if self.index == 7:
        label: '"CopyrightOrArchitectureSpecificData"'
      if self.index == 8:
        label: '"GlobalPtr"'
      if self.index == 9:
        label: '"TLSDirectory"'
      if self.index == 10:
        label: '"LoadConfigurationDirectory"'
      if self.index == 11:
        label: '"BoundImportDirectory"'
      if self.index == 12:
        label: '"ImportAddressTable"'
      if self.index == 13:
        label: '"DelayLoadImportDescriptors"'
      if self.index == 14:
        label: '"COMRuntimedescriptor"'
      if self.index == 15:
        label: '"Reserved"'

  pe_section:
    ascii[8] SectionName: ??
    label: self.SectionName
    u32 VirtualSize: ??
    u32 VirtualAddress: ??
    u32 RawSize: ??
    u32 RawOffset: ??
    u32 reallocations offset: ??
    u32 linenumbers offset: ??
    u16 reallocations count: ??
    u16 linenumbers count: ??
    u32 Flags:
      bit b00000000_00000000_00000000_00000111: Reserved
      bit b00000000_00000000_00000000_00001000: No padding
      bit b00000000_00000000_00000000_00010000: Reserved
      bit b00000000_00000000_00000000_00100000: Code
      bit b00000000_00000000_00000000_01000000: Initialized data
      bit b00000000_00000000_00000000_10000000: Uninitialized data
      bit b00000000_00000000_00000001_00000000: Reserved
      bit b00000000_00000000_00000010_00000000: Info
      bit b00000000_00000000_00000100_00000000: Reserved
      bit b00000000_00000000_00001000_00000000: Remove
      bit b00000000_00000000_00010000_00000000: COMDAT data
      bit b00000000_00000001_11100000_00000000: Reserved
      bit b00000000_00000010_00000000_00000000: Data referenced through the global pointer
      bit b00000000_00001100_00000000_00000000: Reserved
      bit b00000000_11110000_00000000_00000000: Align x-bytes
      bit b00000001_00000000_00000000_00000000: Extended relocations
      bit b00000010_00000000_00000000_00000000: Discardable
      bit b00000100_00000000_00000000_00000000: Cacheable
      bit b00001000_00000000_00000000_00000000: Pageable
      bit b00010000_00000000_00000000_00000000: Shared
      bit b00100000_00000000_00000000_00000000: Executable
      bit b01000000_00000000_00000000_00000000: Readable
      bit b10000000_00000000_00000000_00000000: Writeable
    offset: self.RawOffset
    u8[self.RawSize] Section data: ??
    offset: restore


layout:
  - dos_header Header

  # Detect some exe packers or linkers
  - pklite_header PKLiteHeader
  - exepack_header ExepackHeader
  - tlink_header BorlandTLinkHeader
  - lzexe_header LZEXEHeader

  - new_header NewHeader
  - le_header LEHeader
  - lx_header LXHeader
  - ne_header NEHeader
  - pe_header PEHeader
  - pe_optional_header PEOptionalHeader
  - pe_rva_entry[PEOptionalHeader.RVAEntryCount] PE_RVAEntry # XXX move under pe_optional_header

  - pe_section[PEHeader.Sections] PESection

  # XXX FINISH IMPL - and all of this under ne_header:
  #- offset offset("NewHeader.NewHeaderID") + NEHeader.ModuleReferenceTableOffset
  #- ne_module_reference[NEHeader.ModuleReferenceCount] NEModuleReferences
  #- offset NEHeader.EntryTableOffset
  #- ne_entry_table NEEntryTable    # XXX a slice until end marker?
  #- offset offset("NewHeader.NewHeaderID") + NEHeader.SegmentTableOffset
  #- ne_segment_table[NEHeader.SegmentTableCount] NESegmentTable
  #- offset offset("NewHeader.NewHeaderID") + NEHeader.ImportedNamesTableOffset
  #- ne_imported_names_table NEImportedNamesTable # XXX a slice until end marker
  #- offset offset("NewHeader.NewHeaderID") + NEHeader.ResidentNamesTableOffset
  #- ne_resident_names_table NEResidentNamesTable # XXX a slice until end marker
  #- offset NEHeader.NonResidentNamesTableOffset
  #- ne_nonresident_names_table NENonResidentNamesTable
  #- offset NEHeader.ResourceTableOffset + 2 # XXX skipping "u16 shift"
  #- ne_resource_table NEResourceTable # XXX a slice until end marker
  #- offset NEHeader.FastloadAreaOffset * 16
  #- ne_fastload_area NEFastLoadArea
  # XXX END OF ne_header


  # XXX only this code path for unrecognized header ID:s, requires "relocation_table[Header.RelocationItemCount] RelocationTable" syntax in struct field
#  - offset Header.RelocationTableOffset
#  - relocation_table[Header.RelocationItemCount] RelocationTable
