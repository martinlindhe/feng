# STATUS: 90% - all samples are fully mapped

# - LOW: map "image data" area: BITMAPINFOHEADER and then IMAGEDATA 
#   this is an embedded DIB bitmap... OR, an embedded PNG. so able to refer to a separate template might be helpful?
#     - or just allow to tag and extract opaque "PNG" data, and allow processing on the resulting extracted file (XXX could work with a binwalk like clone too to find the PNG header...)
# TODO: some false matches. for example Gamecube DOL format incorrectly matches this ICO template. Maybe solve by having to match by extension?

references:
  - https://en.wikipedia.org/wiki/ICO_(file_format)
  - https://www.sweetscape.com/010editor/repository/files/ICO.bt

kind: image
name: Microsoft Windows icon and cursor files
extensions: [.ico, .cur]
mime: image/x-icon
endian: little

no_magic: true  # this format has no header

structs:
  icon_dir:
    u16 Reserved: 00 00
    u16 Type:
      eq 0001: TYPE_ICON
      eq 0002: TYPE_CURSOR
      default: invalid
    u16 Resources: ??             # number of image resources in file

  icon_dir_entry:
    u8 Width: ??
    u8 Height: ??
    u8 Palette colors: ??         # 0 = doesn't use palette
    u8 Reserved: ??

    if ICONDIR.Type == TYPE_ICON:
      u16 Color planes: ??
      u16 Bits per pixel: ??

    if ICONDIR.Type == TYPE_CURSOR:
      u16 Horizontal hotspot: ??
      u16 Vertical hotspot: ??

    u32 DataSize: ??
    u32 DataOffset: ??

    # TODO: the "image data" area contains a DIB header and data, or a PNG - could be parsed recursively? or just mark for extraction
    offset: self.DataOffset
    u8[self.DataSize] Image data: ??

layout:
  - icon_dir ICONDIR
  - icon_dir_entry[ICONDIR.Resources] ICONDIRENTRY
