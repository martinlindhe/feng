# STATUS: 50%
#
# Used in Futurama (2003 by Unique Development Studios) PS2, XBox

# TODO: speed up parsing
# NOTE: half of the file is a byte endian swapped copy

references:
  - https://github.com/JayFoxRox/futurama-tools/blob/master/disassemble_ful.py

kind: game
name: Futurama (ps2) Mi2L file
extensions: [.ful]
endian: little

magic:
  - offset: 0000
    match: c'L2iM'

structs:
  header:
    ascii[4] Magic: c'L2iM'

    u32 Unk1: ?? # 0x012c (300 decimal)
    u32 Model:
      eq 00001401: PS2
      eq 00001A0A: XBox
    u32 Variable space size: ??
    u32 Unk2: ?? # 0x0190 (400 decimal)
    u32 Res1: ?? # 0
    u32 Res2: ?? # 0
    u32 Res3: ?? # 0
    u32 ExitPoint address: ?? #
    u32 Res4: ?? # 0

  operation:
    u8 unk1: ?? # Something to do with branching?
    u8 unk2: ?? # Source line?
    u8 unk3: ?? # Source file?
    u8 OperationType:
      eq 02: OP_02
      eq 03: OP_03
      eq 04: OP_04
      eq 05: OP_05
      eq 06: OP_06
      eq 08: OP_NUMBER   # Used for floats and integers?
      eq 09: OP_STRING
      eq 0a: OP_10
      eq 0b: OP_11
      eq 0e: OP_14
      eq 0f: OP_15
      eq 10: OP_16
      eq 11: OP_17
      eq 12: OP_18
      eq 13: OP_19
      eq 14: OP_20
      eq 15: OP_21
      eq 16: OP_22
      eq 17: OP_23
      eq 18: OP_24
      eq 19: OP_25
      eq 1a: OP_26
      eq 1b: OP_27
      default: invalid
    if self.OperationType == OP_02:
      label: '"OP_02"' # 0 args
    if self.OperationType == OP_03:
      label: '"OP_03"' # 0 args
    if self.OperationType == OP_04:
      label: '"OP_04"'
      u32 unk1_op04: ??
      u32 unk2_op04: ??
    if self.OperationType == OP_05:
      label: '"OP_05"'
      u32 unk1_op05: ??
    if self.OperationType == OP_06:
      label: '"OP_06"'
      u32 unk1_op06: ??
    if self.OperationType == OP_NUMBER:
      label: '"NUMBER"'
      f32 Value: ??  # XXX is it always f32 ?
    if self.OperationType == OP_STRING:
      u32 Size: ??
      ascii[self.Size] Value: ??
      label: '"STRING " + cleanstring("self.Value")'
    if self.OperationType == OP_10:
      label: '"OP_10"'
      u32 unk1_op10: ??
      u32 unk2_op10: ??
    if self.OperationType == OP_11:
      label: '"OP_11"'
      u32 unk1_op11: ??
    if self.OperationType == OP_14:
      label: '"OP_14"'
      u32 unk1_op14: ??
    if self.OperationType == OP_15:
      label: '"OP_15"'
      u32 unk1_op15: ??
    if self.OperationType == OP_16:
      label: '"OP_16"'
      i32 unk1_op16: ??
    if self.OperationType == OP_17:
      label: '"OP_17"'
      u32 unk1_op17: ??
    if self.OperationType == OP_18:
      label: '"OP_18"'
      i32 offset_op18: ??
      u32 unk2_op18: ?? # stack size ?
    if self.OperationType == OP_19:
      label: '"OP_19"'
      u32 class_index_op18: ??
      u32 function_index_op18: ??
    if self.OperationType == OP_20:
      label: '"OP_20"'
      u32 unk1_op20: ??
      u32 unk2_op20: ??
      u32 unk3_op20: ??
    if self.OperationType == OP_21:
      label: '"OP_21"' # 0 args
    if self.OperationType == OP_22:
      label: '"OP_22"' # 0 args
    if self.OperationType == OP_23:
      label: '"OP_23"' # 0 args
    if self.OperationType == OP_24:
      label: '"OP_24"' # 0 args
    if self.OperationType == OP_25:
      label: '"OP_25"' # 0 args
    if self.OperationType == OP_26:
      label: '"OP_26"'
      u32 unk1_op26: ??
    if self.OperationType == OP_27:
      label: '"OP_27"'
      u32 unk1_op27: ??
      u32 unk2_op27: ??

    if OFFSET >= FILE_SIZE / 2:
      parse: stop

  footer:
    ascii[4] Magic: c'Mi2L'
    # what follows is the file in big endian

layout:
  - header Header
  - operation[] Op
  - footer Footer
